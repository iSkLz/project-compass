import path from "path";

//#region Constants
// Create a digits shifting object
const digitsShift = {
    "0": "a", "1": "b", "2": "c", "3": "d", "4": "e", "5": "f", "6": "g", "7": "h", 
    "8": "i", "9": "j", "a": "k", "b": "l", "c": "m", "d": "n", "e": "o", "f": "p", 
    "g": "q", "h": "r", "i": "s", "j": "t", "k": "u", "l": "v", "m": "w", "n": "x", 
    "o": "y", "p": "z"
};
//#endregion

/**
 * Generates a random ID composed of only lowercase letters
 * @param chars Number of characters in the generated ID
 */
export function getRandomID(chars = 9) {
    let num = Math.round(Math.random() * (26 ** chars) - 1).toString(26).padStart(9, "0")
        .split("").map(digit => digitsShift[digit as keyof typeof digitsShift]);
    return num.join("");
}

/**
 * Converts a map into an object by mapping keys/values.
 * .toString() is used for non-string keys
 * @param map The map to convert
 */
export function mapToObject<K, V>(map: Map<K, V>): any {
    const obj: any = {};
    for (const kvp of map) {
        const [k, v] = kvp;

        let key: string | symbol;
        if (typeof k === "string" || typeof k === "symbol") {
            key = k;
        } else {
            key = (k as any).toString();
        }

        // Recursively serialize child maps
        if (v instanceof Map)
            obj[key] = mapToObject(v);
        else
            obj[key] = v;
    }

    return obj;
}

/**
 * Converts an object to a map by mapping keys/values.
 * @param obj The object to convert
 */
export function objectToMap<K, V>(obj: any): Map<K, V> {
    const map = new Map<K, V>();
    if (typeof obj === "string") obj = JSON.parse(obj);

    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            map.set((key as any), obj[key]);
        }
    }

    return map;
}

/**
 * Fills in missing option properties from a defaults object.
 * The return value is of type T but its a reference to the same options object.
 * @param options The provided potentially incomplete options
 * @param defaults The default options
 */
export function assignDefaults<T>(options: Partial<T>, defaults: T): T {
    let assigned: T = (options as T);
    for (const key in defaults) {
        if ((assigned as any)[key] == undefined) {
            (assigned as any)[key] = (defaults as any)[key];
        }
    }

    return assigned;
}

/**
 * Returns a promise that resolves immediately
 */
export async function immediatePromise() {
}

/**
 * A promise version of setTimeout.
 * Note: Do not use this in product, asynchronously waiting for Node.JS timers is unperformant.
 * @param time The amount of time in milliseconds
 */
export async function wait(time: number) {
    return new Promise<void>((resolve) => {
        setTimeout(() => resolve(), time);
    });
}
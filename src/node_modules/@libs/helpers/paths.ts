import path from "path";
import fs from "fs";
import { isWindows } from "./os.js";

var root = path.join(module.path, "../../..");
var save = path.join(root, "save");
var data = path.join(root, "data");
var web = path.join(root, "web");
var pics = path.join(root, "pics");
var temp = path.join(root, "temp");
var appStorage: string, ahornStorage: string;

if (!fs.existsSync(save)) fs.mkdirSync(save);
if (!fs.existsSync(temp)) fs.mkdirSync(temp);

if (isWindows) {
    appStorage = process.env.LOCALAPPDATA as string;
} else {
    appStorage = process.env.XDG_CONFIG_HOME || path.join(process.env.HOME as string, ".config");
}

ahornStorage = path.join(appStorage, "Ahorn");

/**
 * Resolves a relative path starting from Compass's root folder
 */
 export function fromRoot(relativePath: string) {
    return path.join(root, relativePath);
}

/**
 * Alias for path.join
 */
export function from(originPath: string, relativePath: string) {
    return path.join(originPath, relativePath);
}

/**
 * Resolves a relative path starting from Compass's temp folder
 * @returns A function that can resolve a relative path starting from the result of this function
 */
export function tempDir(relativePath: string) {
    let resPath = from(temp, relativePath);
    
    if (!fs.existsSync(resPath)) fs.mkdirSync(resPath, {
        recursive: true
    });

    return from.bind(null, resPath);
}

/**
 * Creates a function that resolves relative paths starting from the specified directory
 */
export function here(dir: string) {
    return (relativePath: string) => {
        path.join(dir, relativePath);
    }
}

export {
    root, save, data, pics, web, temp, appStorage, ahornStorage
};
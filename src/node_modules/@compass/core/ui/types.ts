import { BrowserWindow, NativeImage, Menu } from "electron";

export const enum WindowState {
    /**
     * Start the window in the OS's default state
     */
    normal,
    /**
     * Start the window maximized
     */
    maximized,
    /**
     * Start the window in fullscreen mode
     */
    fullscreen
}

export const enum MenuState {
    /**
     * Show the menu bar normally
     */
    shown,
    /**
     * Hide the menu bar but allow it to be brought up when Alt is pressed
     */
    autoHide,
    /**
     * Hide the menu bar completely (while still keeping accelerators from it)
     */
    hidden,
    /**
     * Remove the menu bar altogether
     */
    removed
}

export const enum NodeState {
    /**
     * Enable node integration
     */
    enabled,
    /**
     * Disable node integration
     */
    disabled,
    /**
     * Disable node integration and enable sandbox mode
     */
    sandbox
}

export const enum ShowMode {
    /**
     * Show immediately
     */
    always,

    /**
     * Show when the page has fully loaded
     */
    whenReady,

    /**
     * Setup an IPC handler which the page can call to show itself
     */
    programmatically,

    /**
     * Don't show automatically
     */
    never
}

/**
 * Represents options for a Compass UI class
 */
export interface WindowOptions {
    /**
     * The default title to show for the window before a page loads
     */
    defaultTitle: string;

    /**
     * The default state of the window when showing for the first time
     */
    state: WindowState;

    /**
     * The icon to use for the window before a page loads
     */
    icon: NativeImage | string;

    /**
     * Whether to remove the window's frame
     */
    frameless: boolean;

    /**
     * When to show the window
     */
    show: ShowMode;

    /**
     * Whether to stick the window on top of all other windows in the OS
     */
    alwaysOnTop: boolean;

    /**
     * Whether to show the window in the task bar
     */
    showInTaskbar: boolean;

    /**
     * Parent (owner) window
     */
    parent: BrowserWindow | undefined;

    /**
     * Whether the window has the modal system theme
     */
    modal: boolean;

    /**
     * The type of node integration to use
     */
    nodeState: NodeState;

    /**
     * The absolute path to or the code of a script that will be executed before every requested page is loaded
     */
    preload: string;

    /**
     * Whether to isolate the preload script in a separate contextt or not
     */
    isolatePreload: boolean;

    /**
     * Whether to allow webview tags
     */
    webview: boolean;

    /**
     * Whether to destroy the window when closed
     */
    destroyOnClose: boolean;
    
    /**
     * The menu bar to use for the window, null for nothing
     */
    menuBar: Menu | null;

    /**
     * Visibility state of the menu bar
     */
    menuBarState: MenuState;
};

/**
 * Represents the options exposed for a Compass UI class's contents
 */
export interface WebWindowOptions {
    /**
     * The default title to show for the window before a page loads
     */
    defaultTitle: string;

    /**
     * The default state of the window when showing for the first time
     */
    state: WindowState;

    /**
     * Whether to remove the window's frame
     */
    frameless: boolean;

    /**
     * When to show the window
     */
    show: ShowMode;

    /**
     * Whether to stick the window on top of all other windows in the OS
     */
    alwaysOnTop: boolean;

    /**
     * Whether to show the window in the task bar
     */
    showInTaskbar: boolean;

    /**
     * Whether the window has the modal system theme
     */
    modal: boolean;

    /**
     * The type of node integration to use
     */
    nodeState: NodeState;

    /**
     * The absolute path to or the code of a script that will be executed before every requested page is loaded
     */
    preload: string;

    /**
     * Whether to isolate the preload script in a separate contextt or not
     */
    isolatePreload: boolean;

    /**
     * Whether to allow webview tags
     */
    webview: boolean;

    /**
     * Whether to destroy the window when closed
     */
    destroyOnClose: boolean;

    /**
     * Visibility state of the menu bar
     */
    menuBarState: MenuState;
};
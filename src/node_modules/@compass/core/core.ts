import { app } from "electron/main";
import path from "path";

import Config from "./config.js";
import * as locales from "./locales.js";

import { UIWindow, NodeState, ShowMode, WindowState, fileDelivery } from "./ui/exports.js";

import { utils, paths } from "@libs/helpers";

export type CoreConfig = typeof defaultConfig;
const defaultConfig = {
    firstLaunch: true,
    celestePath: "",
    debug: true
};

export default class Core {
    public static Instance: Core;

    public config: Config;
    public mainConfig: CoreConfig;

    constructor() {
        if (Core.Instance != null || (global as any).compassBooted)
            throw new Error("A different Compass core has been created already");
        Core.Instance = this;
        (global as any).compassBooted = true;

        this.config = new Config("core");
        this.mainConfig = this.config.get<CoreConfig>("core.json", defaultConfig);
    }

    public async init() {
        await locales.scan(paths.fromRoot("data/locals"), "core/");

        fileDelivery("styles", paths.from(paths.web, "styles"));
        fileDelivery("pics", paths.pics);

        if (this.mainConfig.firstLaunch) {
            this.firstLaunch();
        } else {
            // TODO: Implement normal startup code
        }
    }

    public restart() {
        app.relaunch();
        this.shutdown();
    }

    public shutdown() {
        this.config.save();
        app.quit();
    }

    public firstLaunch() {
        this.mainConfig.firstLaunch = false;

        let UI = new UIWindow({
            width: 800,
            height: 800
        },
        {
            defaultTitle: "Celestial Compass - First Launch",
            state: WindowState.maximized,
            icon: paths.from(paths.pics, "icons/compass.png"),
            frameless: false,
            show: ShowMode.whenReady,
            alwaysOnTop: false,
            showInTaskbar: true,
            parent: undefined,
            modal: false,
            nodeState: NodeState.enabled,
            preload: "",
            webview: true
        });

        UI.addConfig("main", this.config);
        UI.serveContent(paths.fromRoot("web/firstlaunch"))("index.html");

        UI.on("ipcAsync", (_event, req) => {
            if (req.finished) this.restart();
        });
    }
}